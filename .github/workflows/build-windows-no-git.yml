name: Windows Build (No Git Issues)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.13.0'
        channel: 'stable'
    
    - name: Configure Git (Fix path issues)
      run: |
        git config --global core.autocrlf false
        git config --global core.filemode false
        git config --global core.longpaths true
        Write-Host "Git configuration updated"
      shell: powershell
    
    - name: Enable Windows Desktop
      run: |
        flutter config --enable-windows-desktop
        flutter config --list
      shell: powershell
    
    - name: Check if Windows platform exists
      run: |
        if (Test-Path "windows") {
          Write-Host "✅ Windows platform already exists"
          Get-ChildItem windows -Name | Select-Object -First 5
        } else {
          Write-Host "❌ Windows platform does not exist, will create manually"
        }
      shell: powershell
    
    - name: Create Windows platform (alternative method)
      run: |
        # Try different approaches to avoid Git issues
        try {
          Write-Host "Attempting method 1: Standard flutter create"
          flutter create --platforms=windows . 2>&1
        } catch {
          Write-Host "Method 1 failed, trying method 2"
        }
        
        if (-not (Test-Path "windows")) {
          Write-Host "Creating minimal Windows platform structure manually..."
          
          # Create basic Windows directory structure
          New-Item -ItemType Directory -Force -Path "windows"
          New-Item -ItemType Directory -Force -Path "windows/runner"
          New-Item -ItemType Directory -Force -Path "windows/flutter"
          
          # Create basic CMakeLists.txt
          $cmake = @"
cmake_minimum_required(VERSION 3.14)
project(elasticsearch_query_helper LANGUAGES CXX)

set(BINARY_NAME "elasticsearch_query_helper")

cmake_policy(SET CMP0063 NEW)

set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")

# Configure build options.
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()

set(CMAKE_EXE_LINKER_FLAGS_PROFILE "")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "")

# Use Unicode for all projects.
add_definitions(-DUNICODE -D_UNICODE)

# Compilation settings that should be applied to most targets.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features($${TARGET} PUBLIC cxx_std_17)
  target_compile_options($${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options($${TARGET} PRIVATE /EHsc)
  target_compile_definitions($${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions($${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()

set(FLUTTER_MANAGED_DIR "$${CMAKE_CURRENT_SOURCE_DIR}/flutter")

# Flutter library and tool build rules.
add_subdirectory($${FLUTTER_MANAGED_DIR})

# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)

add_subdirectory("runner")

# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)

# === Installation ===
# By default, "installing" just makes a relocatable bundle in the build
# directory.
set(BUILD_BUNDLE_DIR "$${PROJECT_BINARY_DIR}/runner")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "$${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

# Start with a clean build bundle directory every time.
install(CODE "
  file(REMOVE_RECURSE \"$${CMAKE_INSTALL_PREFIX}/\")
  " COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "$${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "$${CMAKE_INSTALL_PREFIX}")

install(TARGETS $${BINARY_NAME} RUNTIME DESTINATION "$${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "$${FLUTTER_LIBRARY}" DESTINATION "$${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

install(FILES "$${FLUTTER_ICU_DATA_FILE}" DESTINATION "$${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "$${FLUTTER_ICU_DATA_FILE}" DESTINATION "$${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "$${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "$${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"$${INSTALL_BUNDLE_DATA_DIR}/$${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "$${PROJECT_BUILD_DIR}/$${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "$${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
if(NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
  install(FILES "$${AOT_LIBRARY}" DESTINATION "$${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
"@
          $cmake | Out-File -FilePath "windows/CMakeLists.txt" -Encoding UTF8
          
          Write-Host "✅ Manual Windows platform structure created"
        }
        
        # Verify Windows platform
        if (Test-Path "windows") {
          Write-Host "✅ Windows platform ready"
        } else {
          Write-Host "❌ Failed to create Windows platform"
          exit 1
        }
      shell: powershell
    
    - name: Get dependencies
      run: flutter pub get
      shell: powershell
    
    - name: Clean build
      run: flutter clean
      shell: powershell
    
    - name: Build Windows Release (with error handling)
      run: |
        try {
          Write-Host "Starting Windows build..."
          flutter build windows --release --verbose
          
          if (Test-Path "build\windows\runner\Release\elasticsearch_query_helper.exe") {
            Write-Host "✅ Build successful!"
            $exe = Get-Item "build\windows\runner\Release\elasticsearch_query_helper.exe"
            Write-Host "Executable size: $([math]::Round($exe.Length / 1MB, 2)) MB"
          } else {
            Write-Host "❌ Build failed - executable not found"
            throw "Build failed"
          }
        } catch {
          Write-Host "Build failed with error: $_"
          Write-Host "Checking build directory structure..."
          if (Test-Path "build") {
            Get-ChildItem "build" -Recurse -Name | Select-Object -First 20
          }
          throw $_
        }
      shell: powershell
    
    - name: Create Release Package
      if: success()
      run: |
        Write-Host "Creating release package..."
        
        # Create package directory
        $packageDir = "elasticsearch-query-helper-windows"
        New-Item -ItemType Directory -Force -Path $packageDir
        
        # Copy all files from Release directory
        Copy-Item "build\windows\runner\Release\*" $packageDir -Recurse -Force
        
        # Create README
        $readme = "Elasticsearch Query Helper - Windows Version`n`n"
        $readme += "Installation:`n"
        $readme += "1. Extract all files to a folder`n"
        $readme += "2. Double-click elasticsearch_query_helper.exe`n`n"
        $readme += "System Requirements:`n"
        $readme += "- Windows 10 or later`n"
        $readme += "- No additional dependencies required`n`n"
        $readme += "Version: 1.0.0`n"
        $readme += "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n"
        
        $readme | Out-File "$packageDir\README.txt" -Encoding UTF8
        
        # Create start script
        $startScript = "@echo off`n"
        $startScript += "echo Starting Elasticsearch Query Helper...`n"
        $startScript += "elasticsearch_query_helper.exe`n"
        $startScript += "if %errorlevel% neq 0 (`n"
        $startScript += "    echo Application exited with error`n"
        $startScript += "    pause`n"
        $startScript += ")`n"
        
        $startScript | Out-File "$packageDir\start.bat" -Encoding ASCII
        
        Write-Host "✅ Package created successfully"
        Write-Host "Package contents:"
        Get-ChildItem $packageDir -Name
      shell: powershell
    
    - name: Upload Windows Package
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: elasticsearch-query-helper-windows
        path: elasticsearch-query-helper-windows/
        retention-days: 30
    
    - name: Create ZIP
      if: success()
      run: |
        $zipName = "elasticsearch-query-helper-windows-v1.0.0.zip"
        Compress-Archive -Path "elasticsearch-query-helper-windows\*" -DestinationPath $zipName -Force
        
        Write-Host "✅ ZIP created: $zipName"
        $zipInfo = Get-Item $zipName
        Write-Host "ZIP size: $([math]::Round($zipInfo.Length / 1MB, 2)) MB"
      shell: powershell
    
    - name: Upload ZIP
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: elasticsearch-query-helper-windows-zip
        path: elasticsearch-query-helper-windows-v*.zip
        retention-days: 30